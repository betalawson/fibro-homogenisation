function visualiseActivationMap(act_map, occ_map, newfig)
% This function plots the activation map provided. NaN values are
% interpreted as obstructions, and -1 values are interpreted as unactivated
% locations


%%% COLORMAP SET UP

% Load in the plasma colour map
load('extra_colormaps.mat','plasma');

% Define a colour to be used for non-activated sites
nonact_clr = [0.8 0.8 0.8];

% Define a colour to be used for obstructions
obstacles_clr = [0.2 0.2 0.2];

% Place non-activated sites at one end of the colormap
act_clrmap = [ nonact_clr; plasma ];



%%% PLOT SET UP

% Read out the activation map size
[Ny, Nx] = size(occ_map);

% Find the minimum activation time (not including -1), and make it zero
min_val = min(act_map(act_map > 0));
act_map = act_map - min_val;
% Find the new maximum value
max_val = max(act_map(:));



%%% PLOTTING

% Initialise figure
if nargin < 3 || newfig
    figure('units','Normalized','OuterPosition',[0 0 1 1]);
end

% Create separate axes for the two parts of the plot (using the base axes
% generated by figure command)
act_ax = axes;
hold(act_ax,'on');
obs_ax = axes;

% Use the activation times at nodes to create an interpolated map of
% activation time
pcolor(act_ax, act_map);
shading(act_ax,'flat');

% Set up the colour axis so the 2nd to 257th elements correspond to 0 to
% max, then apply colour

caxis(act_ax, [-max_val/256*1.01, max_val]);
colormap(act_ax, act_clrmap);

% Plot the obstructed sites over the top

occ_map = double(occ_map);
occ_map(occ_map == 0) = NaN;
occ_map_ext = [occ_map, NaN( size(occ_map,1), 1 ); NaN( 1, size(occ_map,2)+1 ) ];

pcolor(obs_ax, occ_map_ext);
colormap(obs_ax, obstacles_clr);
shading(obs_ax, 'flat');

% Hide the top axes
obs_ax.Visible = 'off';
obs_ax.XTick = [];
obs_ax.YTick = [];

axis(obs_ax,'equal');
axis(act_ax,'equal');
axis(obs_ax,[1 Nx 1 Ny]);
axis(act_ax,[1 Nx 1 Ny]);

hLink = linkprop([act_ax,obs_ax],{'XLim','YLim','ZLim','CameraUpVector','CameraPosition','CameraTarget'});
setappdata(gcf,'StoreTheLink',hLink);

end